// Seth Command Center - Standalone Schema
// Manifest-first, ritual-driven personal intelligence platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id        String   @id @default(cuid())
  name      String   @unique
  type      String   // 'eden','vibecoding','automata','personal'
  status    String   // 'active','planning','paused','done'
  color     String?  // UI accent color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  kpis    KPI[]
  works   Work[]
  rituals Ritual[]
  tasks   Task[]

  @@map("projects")
}

model KPI {
  id        String   @id @default(cuid())
  key       String   // 'eden.mrr','solienne.streak','newsletter.subs'
  value     Float
  at        DateTime
  source    String   // 'eden-bridge','cli','manual'
  projectId String
  createdAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([key, at])
  @@index([projectId])
  @@map("kpis")
}

model Work {
  workId      String   @id
  projectId   String
  createdAt   DateTime
  contentHash String
  source      String   // 'eden_api_v2','local','legacy'
  metadata    String?  // flexible metadata storage (JSON string)

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt])
  @@map("works")
}

model Ritual {
  id        String    @id @default(cuid())
  projectId String
  name      String    // 'daily-drop','newsletter-draft','abraham-countdown'
  cron      String    // '0 9 * * *'
  lastRun   DateTime?
  streak    Int       @default(0)
  enabled   Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([enabled, lastRun])
  @@map("rituals")
}

model Task {
  id        String    @id @default(cuid())
  projectId String
  title     String
  notes     String?   // markdown notes
  priority  Int       @default(2) // 1=high, 2=medium, 3=low
  status    String    @default("open") // 'open','doing','blocked','done','snoozed'
  due       DateTime?
  source    String    @default("manual") // 'email','slash','calendar','api','manual'
  tags      String   // Comma-separated tags
  energy    Int       @default(2) // 1=deep, 2=normal, 3=light
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sourceEmails SourceEmail[]

  @@index([projectId, status])
  @@index([priority, due])
  @@index([status, priority])
  @@map("tasks")
}

model SourceEmail {
  id         String   @id @default(cuid())
  taskId     String
  from       String
  subject    String
  snippet    String?
  threadUrl  String?  // link back to Gmail
  receivedAt DateTime
  createdAt  DateTime @default(now())

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([receivedAt])
  @@map("source_emails")
}

model AuditLog {
  id        String   @id @default(cuid())
  actor     String   // '@seth','agent','system','user','job'
  action    String   // 'todo.create','todo.complete','todo.snooze','todo.delegate','ritual.run','manifest.recompute','bridge.ingest'
  payload   String   // JSON string
  status    String   // 'success','failure','pending'
  error     String?
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([action, status])
  @@index([actor])
  @@map("audit_logs")
}

// Job Queue (Redis-ready design)
model Job {
  id        String    @id @default(cuid())
  type      String    // 'backfill','ritual.run','manifest.recompute'
  payload   String   // JSON string
  status    String    // 'pending','running','completed','failed'
  attempts  Int       @default(0)
  maxRetries Int      @default(3)
  runAt     DateTime  @default(now())
  startedAt DateTime?
  completedAt DateTime?
  error     String?
  createdAt DateTime  @default(now())

  @@index([status, runAt])
  @@index([type])
  @@map("jobs")
}